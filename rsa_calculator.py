from Crypto.Util.number import *

def calculate_l(p, q, e, n, c):
    phi = (p-1)*(q-1)
    d = pow(e, -1, phi)
    
    c_divided = (c * pow(pow(7, 67, n), -1, n)) % n
    
    plaintext_num = pow(c_divided, d, n)
    plaintext_bytes = long_to_bytes(plaintext_num)
    return plaintext_bytes

p = 10075074928110055320983299450955832147285581720686937452885136490075482010478329285574909031817766443094543754307130937113436894210662611186804910350673739
q = 9886521529465159110858223684531245586341305742202655520627984802997767481968177534026821220827361390740860408054552957084006774174916828299460710141588913
n = 99607445187734702107672050713219055972353811018649673149729254351994084224071878146019333582468778929779986007724763345905018859972007667888748490798685901727009897608934867544049494299343511477402233809426496145541725402417288332912803260127889996200961568136031432691565575110457301560346058909033522655707
c = 39846410813151558582155351307536396275470154197815746409248003690219981108430982531412398847576131983987228821922170894316744469976162149284764673750057503209953057000646539975526352712986657979423992853266193509637393750747906929220101138988581175284078696544686419718769387285821068512198694788165401230753744242809745342454406960609358464495278149729768163763997
e = 65537

plaintext_l = calculate_l(p, q, e, n, c)
print(plaintext_l.decode('utf-8'))